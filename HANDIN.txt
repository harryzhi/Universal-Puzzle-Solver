Student Name #1: TODO: Sheng De Zhi
Student ugrad login #1: TODO: b3d0b

Student Name #2: TODO: Richard Lau
Student ugrad login #2: TODO: d2b0b

Team name (for fun!): TODO: Team Reno Jackson

Acknowledgment that you understand and have followed the course's
collaboration policy
(http://www.ugrad.cs.ubc.ca/~cs221/current/syllabus.shtml#conduct):

TODO: Sheng De Zhi, Richard Lau

TODO: submit using: make handin-proj2

----------------------------------------------------------------------

Approximate hours on project: TODO:
7.5 hours
----------------------------------------------------------------------

For teams, rough breakdown of work: TODO:
did everything together
----------------------------------------------------------------------

Acknowledgment of assistance: TODO:
piazza, priority queue slides from class
----------------------------------------------------------------------

Questions:

For the explanations, generally a sentence or two should be enough.
Type your answers directly in this file.


1.  Edit solve.cpp to use the 3x3 Slider Puzzle and the LinkedListDict
for seenStates.  Comment out the usleep call and cout statements.
What is the runtime when you use StdStack for activeStates?
When you use StdQueue for activeStates?  (These will take several minutes.)
Notice that these are MUCH faster than in Project 1, because I have
improved LinkedListDict, but your code will make things run even faster!

StdStack: real	8m7.948s,   user   8m1.437s,   sys	0m2.993s
StdQueue: real	34m44.938s, user   33m56.453s, sys	0m7.710s


2.  Now, change the code to use FixedChainHashDict with size 1000.
What are the runtimes, and how many steps long was the solution found,
using StdStack and StdQueue?
You can now see the trade-off of DFS vs. BFS.
And you should see the huge gain of hashing.

(DFS)StdStack: real	0m13.614s, user	   0m9.805s, sys    0m0.935s
		solution was found in STEP 48431
(BFS)StdQueue: real	0m43.658s, user	   0m38.714s,sys    0m0.288s
		solution was found in STEP 31


3.  Repeat Q2 with ResizeChainHashDict.  (What are runtimes and steps, etc.?)
What is the average number of
collision chain nodes examined per call to find?

(DFS)StdStack: real	0m2.520s, user 	   0m0.860s, sys    0m0.637s
		-solution was found in STEP 48431
		-average number of collision chain nodes examined: 44288/199153 = 0.22234

(BFS)StdQueue: real	0m1.906s, user	   0m1.759s, sys    0m0.037s
		-solution was found in STEP 31
		-average number of collision chain nodes examined: 103260/483765 = 0.21345


4.  Now, edit solve.cpp to go back to using LinkedListDict, but switch
to HeapPriorityQueue.  Try running the program with the usleep and
cout commands enabled.  Do you see what BestFS is doing?  (Either yes or
no is fine, but it's fun to try to see what's happening.)  Then,
comment out the usleep and cout statements and time this.  How long
did it take?  You should really see the advantage of BestFS!

yes, we think that it is looking for the next state that is closest to the solution.

(BestFS)HeapPriorityQueue: real	0m0.019s, user 	0m0.011s, sys	 0m0.002s
			- solution was found in STEP 101

5.  With your new data structures, the 3x3 slider puzzle has become
too easy!  You can try the 4x4 slider puzzle if you'd like, but then
switch to the 5x5 slider puzzle.  Make sure you are using HeapPriorityQueue.
How long does this take if you use LinkedListDict?  FixedChainHashDict
with size 1000?  ResizeChainHashDict?  Are you impressed?

LinkedListDict:real	0m10.974s, user	    0m10.906s, sys	0m0.035s

FixedChainHashDict:real     0m1.289s, user      0m1.224s, sys      0m0.027s

ResizeChainHashDict:real    0m1.258s, user	0m1.223s, sys      0m0.025s

yes, we are very impressed :)
----------------------------------------------------------------------

We will be checking your implementations of HeapPriorityQueue,
FixedChainHashDict, and ResizeChainHashDict.